#!/usr/bin/env zsh
# Copyright (c) 2016-2017 Dyne.org Foundation
#
# heads.blend is written and maintained by Ivan J. <parazyd@dyne.org>
#
# This source code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this source code. If not, see <http://www.gnu.org/licenses/>.

## libdevuansdk build script for heads

source "$R/../config"

blend_preinst() {
	fn blend_preinst
	req=(strapdir blend)
	ckreq || return 1

	notice "executing $blend_name preinst"

	add-user luther luther
}

blend_postinst() {
	fn blend_postinst
	req=(strapdir)
	ckreq || return 1

	notice "executing $blend_name postinst"

	#nopackage=(awesome gradm tomb jaromail tor torsocks arm icecat sup)
	nopackage=(awesome tomb tor torsocks arm icecat electrum)
	for app in $nopackage; do
		blend_install_${app} || zerr
	done || zerr

	notice "grabbing rootfs-overlay"
	pushd "$strapdir"
	sudo git clone "$rootfs_overlay" || zerr
	sudo mv -v   rootfs-overlay/.git . || zerr
	sudo cp -rav rootfs-overlay/* .    || zerr
	sudo rm -rf  rootfs-overlay
	popd

	blend_install_sup || zerr

	blend_fixpax   || zerr
	blend_finalize || zerr
}

build_kernel_amd64() {
	fn build_kernel_amd64
	req=(R arch)
	req+=(kernel_heads_git)
	ckreq || return 1

	func "override libdevuansdk's build_kernel_amd64"

	[[ -d $R/tmp/kernels/$arch/linux-heads ]] || {
		notice "cloning linux-heads..."
		mkdir -p "$R/tmp/kernels/$arch"
		pushd "$R/tmp/kernels/$arch"
		git clone "$kernel_heads_git" || zerr
		popd
	}

	notice "compiling linux-heads"
	pushd "$R/tmp/kernels/$arch/linux-heads" || zerr
	git pull origin master
	cp -f "$R/../extra/heads-${arch}.config" .config || zerr
	make $MAKEOPTS || zerr
	sudo -E make INSTALL_MOD_PATH=$strapdir   modules_install || zerr
	sudo -E make INSTALL_PATH=$strapdir/boot  install         || zerr
	popd
}
##{{{ iso_write_isolinux_cfg()
iso_write_isolinux_cfg() {
	fn iso_write_isolinux_cfg "(override)"
	req=(workdir arch)
	ckreq || return 1

	notice "writing isolinux configuration"
	cat <<EOF | sudo tee ${workdir}/binary/isolinux/isolinux.cfg >/dev/null
ui vesamenu.c32
prompt 0
menu title heads boot menu
timeout 300

label live-${arch}
menu label ^heads live (${arch})
menu default
linux /live/vmlinuz
append initrd=/live/initrd boot=live net.ifnames=0 nomodeset

endtext
EOF
}
##}}}
## {{{ blend_fixpax()
blend_fixpax() {
	fn blend_fixpax
	req=(strapdir)
	ckreq || return 1

	notice "fixing up pax markings"

	cat <<EOF | sudo tee ${strapdir}/fixpax >/dev/null
#!/bin/sh

## icedove
paxctl -c /usr/bin/icedove
paxctl -m /usr/bin/icedove

## icecat
paxctl -c /usr/local/icecat/icecat
paxctl -m /usr/local/icecat/icecat

## surf
paxctl -c /usr/bin/surf
paxctl -m /usr/bin/surf
EOF
	chroot-script fixpax
}
## }}}
## {{{ blend_install_ferm()
blend_install_ferm() {
	fn blend_install_ferm
	req=(strapdir ferm_version ferm_url)
	ckreq || return 1

	notice "cloning ferm git"
	sudo git clone "$ferm_url" "$strapdir/root/ferm" || zerr

	notice "installing ferm in $strapdir"

	cat <<EOF | sudo tee ${strapdir}/install-ferm >/dev/null
#!/bin/sh
cd /root/ferm
git checkout ${ferm_version}
make ${MAKEOPTS}
make install
cd ..
rm -rf ferm
EOF
	chroot-script install-ferm || zerr
}
## }}}
## {{{ blend_install_awesome()
blend_install_awesome() {
	fn blend_install_awesome
	req=(strapdir awesome_version awesome_url)
	req+=(xcb_xrm_version xcb_xrm_url)
	ckreq || return 1

	notice "downloading awesomewm"

	sudo curl -L -o "$strapdir/root/xrm.tbz2"     "$xcb_xrm_url" || zerr
	sudo curl -L -o "$strapdir/root/awesome.tbz2" "$awesome_url" || zerr

	notice "compiling..."

	cat <<EOF | sudo tee ${strapdir}/install-awesome >/dev/null
#!/bin/sh
cd /root
tar xvf xrm.tbz2
cd xcb-util-xrm-${xcb_xrm_version}
./configure --prefix=/usr --enable-shared --enable-static
make
make install
cd /root
tar xvf awesome.tbz2
cd awesome-${awesome_version}
#AWESOME_IGNORE_LGI=1 make
#AWESOME_IGNORE_LGI=1 make package
make
make package
find . -name '*.deb' | sed 1q | xargs dpkg -i || return 1
cd /root
sed -i /usr/local/share/awesome/themes/zenburn/theme.lua \
	-e 's@^theme.wallpaper.*@theme.wallpaper = "/home/luther/.config/awesome/background.jpg"@' \
	-e 's/sans/Terminus/'
rm -rf awesome* xrm* xcb*
EOF
	chroot-script install-awesome || zerr
}
## }}}
## {{{ blend_install_gradm()
blend_install_gradm() {
	fn blend_install_gradm
	req=(gradm_version gradm_url strapdir)
	ckreq || return 1

	notice "grabbing gradm ${gradm_version}"

	sudo curl -L -o "$strapdir/root/gradm.tgz" "$gradm_url" || zerr

	notice "compiling..."

	cat <<EOF | sudo tee ${strapdir}/install-gradm >/dev/null
#!/bin/sh
cd /root
tar xvf gradm.tgz
cd gradm
make ${MAKEOPTS}
make install
cd ..
rm -rf gradm*
EOF
	chroot-script install-gradm || zerr
}
## }}}
## {{{ blend_install_tomb()
blend_install_tomb() {
	fn blend_install_tomb
	req=(strapdir tomb_version tomb_url)
	req+=(gtomb_version gtomb_url)
	ckreq || return 1

	notice "cloning tomb gits"
	sudo git clone "$tomb_url"  "$strapdir/root/tomb"  || zerr
	sudo git clone "$gtomb_url" "$strapdir/root/gtomb" || zerr

	notice "installing tomb in $strapdir"

	cat <<EOF | sudo tee ${strapdir}/install-tomb >/dev/null
#!/bin/sh
cd /root/tomb
git checkout ${tomb_version}
make install

cd extras/kdf-keys
make
make install

cd /root/gtomb
cp gtomb /usr/local/bin/gtomb
chmod 755 /usr/local/bin/gtomb
cd ..

rm -rf tomb
rm -rf gtomb
EOF
	chroot-script install-tomb
}
## }}}
## {{{ blend_install_jaromail()
blend_install_jaromail() {
	fn blend_install_jaromail
}
## }}}
## {{{ blend_install_tor()
blend_install_tor() {
	fn blend_install_tor
	req=(strapdir tor_url tor_version)
	ckreq || return 1

	notice "installing tor in $strapdir"

	notice "downloading tor..."
	sudo curl -L -o "$strapdir/root/tor.tgz" "$tor_url"

	cat <<EOF | sudo tee ${strapdir}/install-tor >/dev/null
#!/bin/sh
cd /root
tar xvf tor.tgz
cd tor-${tor_version}

./configure \
	--prefix=/usr \
	--disable-system-torrc \
	--disable-systemd

make ${MAKEOPTS}
make install

cd /root

rm -rf tor*
EOF
	chroot-script install-tor || zerr
}
## }}}
## {{{ blend_install_torsocks()
blend_install_torsocks() {
	fn blend_install_torsocks
	req=(strapdir torsocks_version torsocks_url)
	ckreq || return 1

	notice "installing torsocks in $strapdir"

	notice "cloning torsocks"
	sudo git clone "$torsocks_url" "$strapdir/root/torsocks"

	notice "installing torsocks in $strapdir"
	cat <<EOF | sudo tee ${strapdir}/install-torsocks >/dev/null
#!/bin/sh
cd /root/torsocks
#git checkout ${torsocks_version}
./autogen.sh
./configure --prefix=/usr
make ${MAKEOPTS}
make install

cd ..
rm -rf torsocks
EOF
	chroot-script install-torsocks || zerr
}
## }}}
## {{{ blend_install_arm()
blend_install_arm() {
	fn blend_install_arm
	req=(strapdir arm_url arm_version)
	ckreq || return 1

	notice "installing arm in $strapdir"

	notice "downloading arm..."
	sudo curl -L -o "$strapdir/root/arm.tbz2" "$arm_url"

	cat <<EOF | sudo tee ${strapdir}/install-arm >/dev/null
#!/bin/sh
cd /root
tar xvf arm.tbz2
cd arm
./install
cd /root
rm -rf arm*
EOF
	chroot-script install-arm || zerr
}
## }}}
## {{{ blend_install_icecat()
blend_install_icecat() {
	fn blend_install_icecat
	req=(strapdir)
	ckreq || return 1


	notice "downloading GNU Icecat..."
	sudo curl -L -o "$strapdir/root/icecat.tbz2" "$icecat_url" || zerr

	notice "installing GNU Icecat in $strapdir"
	pushd $strapdir/usr/local
		sudo tar xfp $strapdir/root/icecat.tbz2
		sudo rm -f   $strapdir/root/icecat.tbz2
	popd
}
## }}}
## {{{ blend_install_electrum()
blend_install_electrum() {
	fn blend_install_electrum
	req=(strapdir electrum_url)
	ckreq || return 1


	notice "installing electrum..."
	cat <<EOF | sudo tee ${strapdir}/install-electrum >/dev/null
#!/bin/sh
sudo pip install ${electrum_url} || return 1
EOF
	chroot-script install-electrum || zerr
}
## }}}
## {{{ blend_install_sup()
blend_install_sup() {
	fn blend_install_sup
	req=(strapdir)
	ckreq || return 1

	notice "installing sup..."
	cat <<EOF | sudo tee ${strapdir}/install-sup >/dev/null
#!/bin/sh
cd /usr/src/sup
make
make install
EOF
	chroot-script install-sup || zerr
}
## }}}
## {{{ blend_finalize()
blend_finalize() {
	fn blend_finalize
	req=(strapdir)
	ckreq || return 1

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh
## rootless xorg
groupadd wheel
chown -v :input /usr/bin/Xorg
chmod -v g+s /usr/bin/Xorg
for i in input video audio users plugdev wheel; do
	gpasswd -a luther \${i}
done
## shells
chsh -s /bin/zsh luther
chsh -s /bin/zsh root
## perms
chown -R 1000:1000 /home/luther
echo "Defaults rootpw" > /etc/sudoers.d/heads
echo "Defaults insulsts" >> /etc/sudoers.d/heads
echo "luther heads = NOPASSWD: /usr/local/bin/tomb" >> /etc/sudoers.d/heads
chmod 0440 /etc/sudoers.d/heads
## misc
rm -rf /usr/local/share/zsh/site-functions
adduser --system --quiet --group clearnet # for a clearnet browser
sed -i -e 's/devuan/heads/' /etc/hosts
## tor
groupadd -g 124 debian-tor
useradd -u 118 -g debian-tor -M -d /var/lib/tor -s /bin/false debian-tor
mkdir -p /var/lib/tor
chown -R debian-tor:debian-tor /var/lib/tor
mkdir -p /var/log/tor
chown debian-tor:adm /var/log/tor
#update-rc.d tor defaults
update-rc.d acpid defaults
## cleanup
apt-get --yes --force-yes purge ${finalize_purge_packages}
apt-get --yes --force-yes autoremove
apt-get clean
updatedb
EOF
	chroot-script finalize || zerr
}
## }}}
