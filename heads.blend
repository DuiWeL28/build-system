#!/usr/bin/env zsh
# Copyright (c) 2016-2017 Dyne.org Foundation
#
# heads.blend is written and maintained by Ivan J. <parazyd@dyne.org>
#
# This source code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this source code. If not, see <http://www.gnu.org/licenses/>.

## libdevuansdk build script for heads

source "$R/../config"

blend_preinst() {
	fn blend_preinst
	req=(strapdir blend)
	ckreq || return 1

	notice "executing $blend_name preinst"

	add-user luther luther
}

blend_postinst() {
	fn blend_postinst
	req=(strapdir)
	ckreq || return 1

	notice "executing $blend_name postinst"

	local nopackage=(ferm tomb jaromail tor torsocks icecat)
	for app in $nopackage; do
		blend_install_${app} || zerr
	done

	notice "grabbing rootfs-overlay"
	pushd "$strapdir"
	sudo git clone https://git.devuan.org/heads/rootfs-overlay || zerr
	sudo mv -v   rootfs-overlay/.git . || zerr
	sudo cp -rav rootfs-overlay/* .    || zerr
	sudo rm -rf  rootfs-overlay
	popd

	blend_fixpax   || zerr
	blend_finalize || zerr
}

build_kernel_amd64() {
	fn build_kernel_amd64
	req=(R arch kernel_minor kernel_version)
	req+=(kernel_url_main kernel_url_patch)
	req+=(kernel_grsec)
	ckreq || return 1

	func "override libdevuansdk's build_kernel_amd64"

	[[ -d $R/tmp/kernels/$arch/linux-${kernel_minor} ]] || {
		notice "downloading linux $kernel_minor"
		pushd "$R/tmp/kernels/$arch"
		curl -L -O "$kernel_url_main" || zerr
		act "extracting..."
		tar xf $(basename $kernel_url_main)
		pushd linux-${kernel_minor}
		notice "downloading $kernel_version patch"
		curl -L -O "$kernel_url_patch" || zerr
		act "extracting..."
		xz -d $(basename $kernel_url_patch)
		act "patching..."
		patch -p1 < $(basename $kernel_url_patch) || zerr
		act "done!"
		notice "downloading grsec patch"
		curl -L -o grsec.patch "$kernel_grsec" || zerr
		act "patching..."
		patch -p1 < grsec.patch || zerr
		act "done!"

		notice "grabbing linux-libre scripts"
		for i in ${kernel_minor} check main; do
			curl -O http://linux-libre.fsfla.org/pub/linux-libre/releases/${kernel_version}-gnu/deblob-${i} || zerr
			chmod +x deblob-${i}
		done
		notice "deblobbing kernel..."
		./deblob-4.4 || zerr
		popd
		popd
	}

	notice "compiling kernel ${kernel_version}"
	cp -f "$R/../extra/${kernel_version}-${arch}.config" .config || zerr
	make $MAKEOPTS || zerr
	sudo -E make INSTALL_PATH=$strapdir/boot  install         || zerr
	sudo -E make INSTALL_MOD_PATH=$strapdir   modules_install || zerr
}

## {{{ blend_fixpax()
blend_fixpax() {
	fn blend_fixpax
	req=(strapdir)
	ckreq || return 1

	notice "fixing up pax markings"

	cat <<EOF | sudo tee ${strapdir}/fixpax >/dev/null
#!/bin/sh

## icedove
paxctl -c /usr/bin/icedove
paxctl -m /usr/bin/icedove

## icecat
paxctl -c /usr/local/icecat/icecat
paxctl -m /usr/local/icecat/icecat
EOF
	chroot-script fixpax
}
## }}}
## {{{ blend_install_gradm()
blend_install_gradm() {
	fn blend_install_gradm
	req=(gradm_version gradm_url strapdir)
	ckreq || return 1

	notice "grabbing gradm ${gradm_version}"

	pushd $strapdir/root
	sudo curl -L -O "$gradm_url" || zerr
	sudo tar xf $(basename $gradm_url) || zerr

	notice "compiling..."
	pushd gradm
	sudo make || zerr
	sudo -E make DESTDIR=$strapdir install || zerr
	popd

	sudo rm -rf gradm*

	popd
}
## }}}
## {{{ blend_install_tomb()
blend_install_tomb() {
	fn blend_install_tomb
	req=(strapdir tomb_version tomb_url)
	req+=(gtomb_version gtomb_url)
	ckreq || return 1

	notice "cloning tomb gits"
	sudo git clone $tomb_url  $strapdir/root/tomb  || zerr
	sudo git clone $gtomb_url $strapdir/root/gtomb || zerr

	notice "installing tomb in $strapdir"

	cat <<EOF | sudo tee ${strapdir}/install-tomb >/dev/null
#!/bin/sh
cd /root/tomb
git checkout ${tomb_version}
make install

cd extras/kdf-keys
make
make install

cd /root/gtomb
git checkout ${gtomb_version}
PREFIX=/usr make install
cd ..

rm -rf tomb
rm -rf gtomb
EOF
	chroot-script install-tomb
}
## }}}
## {{{ blend_install_ferm()
blend_install_ferm() {
	fn blend_install_ferm
	req=(strapdir ferm_version ferm_url)
	ckreq || return 1

	notice "cloning ferm git"
	sudo git clone $ferm_url  $strapdir/root/ferm || zerr

	notice "installing ferm in $strapdir"

	cat <<EOF | sudo tee ${strapdir}/install-ferm >/dev/null
#!/bin/sh
cd /root/ferm
git checkout ${ferm_version}
make
make install
cd ..
rm -rf ferm
EOF
	chroot-script install-ferm || zerr
}
## }}}
## {{{ blend_install_jaromail()
blend_install_jaromail() {
	fn blend_install_jaromail
}
## }}}
## {{{ blend_install_tor()
blend_install_tor() {
	fn blend_install_tor
	req=(strapdir tor_url tor_version)
	ckreq || return 1

	notice "installing tor in $strapdir"

	notice "downloading tor..."
	sudo curl -L -o $strapdir/root/tor.tgz $tor_url

	cat <<EOF | sudo tee ${strapdir}/install-tor >/dev/null
#!/bin/sh
cd /root
tar xvf tor.tgz
cd tor-${tor_version}

./configure \
	--prefix=/usr \
	--disable-system-torrc \
	--disable-systemd

make
make install

cd /root

rm -rf tor*
EOF
	chroot-script install-tor || zerr
}
## }}}
## {{{ blend_install_torsocks()
blend_install_torsocks() {
	fn blend_install_torsocks
	req=(strapdir torsocks_version torsocks_url)
	ckreq || return 1

	notice "installing torsocks in $strapdir"

	notice "cloning torsocks"
	sudo git clone $torsocks_url $strapdir/root/torsocks

	notice "installing torsocks in $strapdir"
	cat <<EOF | sudo tee ${strapdir}/install-torsocks >/dev/null
#!/bin/sh
cd /root/torsocks
git checkout ${torsocks_version}
./autogen.sh
./configure --prefix=/usr
make
make install

cd ..
rm -rf torsocks
EOF
	chroot-script install-torsocks || zerr
}
## }}}
## {{{ blend_install_icecat()
blend_install_icecat() {
	fn blend_install_icecat
	req=(strapdir)
	ckreq || return 1


	notice "downloading GNU Icecat..."
	sudo curl -L -o $strapdir/root/icecat.tbz2 $icecat_url || zerr

	notice "installing GNU Icecat in $strapdir"
	pushd $strapdir/usr/local
		sudo tar xfp $strapdir/root/icecat.tbz2
		sudo rm -f   $strapdir/root/icecat.tbz2
	popd
}
## }}}
## {{{ blend_finalize()
blend_finalize() {
	fn blend_finalize
	req=(strapdir)
	ckreq || return 1

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh
## rootless xorg
chown :input /usr/bin/Xorg
chmod g+s /usr/bin/Xorg
gpasswd -a luther input
gpasswd -a luther video
## shells
chsh -s /bin/zsh luther
chsh -s /bin/zsh root
EOF
	chroot-script finalize || zerr
}
## }}}
