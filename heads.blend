#!/usr/bin/env zsh
# Copyright (c) 2016-2017 Dyne.org Foundation
#
# heads.blend is written and maintained by Ivan J. <parazyd@dyne.org>
#
# This source code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this source code. If not, see <http://www.gnu.org/licenses/>.

## libdevuansdk build script for heads

source "$R/../config"

blend_preinst() {
	fn blend_preinst
	req=(strapdir blend)
	ckreq || return 1

	notice "executing $blend_name preinst"

	add-user luther luther
}

blend_postinst() {
	fn blend_postinst
	req=(strapdir)
	ckreq || return 1

	notice "executing $blend_name postinst"

	nopackage=(tomb torsocks tbb)
	for app in $nopackage; do
		blend_install_${app} || zerr
	done || zerr

	notice "grabbing rootfs-overlay"
	pushd "$strapdir"
	sudo git clone "$rootfs_overlay"   || zerr
	sudo mv -v   rootfs-overlay/.git . || zerr
	sudo cp -rav rootfs-overlay/* .    || zerr
	sudo rm -rf  rootfs-overlay
	popd

	blend_install_sup || zerr
	blend_fixpax      || zerr
	blend_finalize    || zerr
}

build_kernel_${arch}() {
	fn build_kernel_${arch}
	req=(R arch strapdir)
	req+=(kernel_heads_git)
	ckreq || return 1

	func "override libdevuansdk's build_kernel_${arch}"

	[[ -d $strapdir/usr/src/linux-heads ]] || {
		notice "cloning linux-heads..."
		sudo mkdir -p "$strapdir/usr/src/linux-heads"
		sudo git clone "$kernel_heads_git" "$strapdir/usr/src/linux-heads" || zerr
	}

	notice "compiling linux-heads"
	pushd "$strapdir/usr/src/linux-heads" || zerr
	sudo git pull origin master
	sudo cp -f "$R/../extra/heads-${arch}.config" .config
	popd

	cat <<EOF | sudo tee ${strapdir}/install-linux-heads >/dev/null
#!/bin/sh
cd /usr/src/linux-heads
make ${MAKEOPTS}     || return 1
make modules_install || return 1
make install         || return 1
cd ..
rm -rf linux-heads
EOF
	chroot-script -d install-linux-heads || zerr
}

##{{{ iso_write_isolinux_cfg()
iso_write_isolinux_cfg() {
	fn iso_write_isolinux_cfg "(override)"
	req=(workdir arch)
	ckreq || return 1

	## shamelessly stolen from katolaz minimal live :p
	## hope you don't mind

	notice "writing isolinux configuration"
	sudo cp -f "$R/../extra/splash.png" "$workdir/binary/isolinux/splash.png"
	cat <<EOF | sudo tee ${workdir}/binary/isolinux/isolinux.cfg >/dev/null
default /isolinux/vesamenu.c32
prompt 0
timeout 30

menu hshift 6
menu width 64

menu title heads boot menu
menu background /isolinux/splash.png
menu color title    * #ff000000 #00ffffff none
menu color border   * #00000000 #00000000 none
menu color sel      1;7;37;30 #ffffffff #ff000000 none
menu color unsel    1;30;37 #ff000000 #ffffffff none
menu color hotsel   1;7;37;40 #ffffffff #76a1d0ff *
menu color tabmsg   1;30;37 #ff000000 #ffffffff none
menu color cmdline  1;30;37 #ff000000 #ffffffff none
menu color help     37;40 #ffdddd00 #00000000 none
menu vshift 10
menu rows 12
#menu helpmsgrow 15
#menu cmdlinerow 25
#menu timeoutrow 26
#menu tabmsgrow 14
menu tabmsg Press ENTER to boot or TAB to edit a menu entry

label live-${arch}
	menu label heads live (${arch})
	linux /live/vmlinuz
	append initrd=/live/initrd boot=live union=overlay net.ifnames=0

label live-${arch}-toram
	menu label heads live (${arch}) (toram)
	linux /live/vmlinuz
	append initrd=/live/initrd boot=live union=overlay net.ifnames=0 toram

endtext
EOF
}
##}}}
##{{{ bootstrap_tar_unpack_()
bootstrap_tar_unpack() {
	fn "boostrap_tar_unpack $@ (blend override)"
	local unpath="$1"
	req=(unpath bootstrap_tgz)
	ckreq || return 1

	if [[ -f "${unpath}/.keep" ]]; then
		mkdir -p "${unpath}"
		silly
		sudo tar xfp "$bootstrap_tgz" -C "${unpath}"
		sudo mkdir -p "${unpath}"/{boot,dev,sys,proc,tmp}
		sudo chmod 1777 "$unpath"/tmp
	else
		error "no .keep file found. exiting..."
		zerr
		exit 1
	fi

	cat <<EOF | sudo tee ${strapdir}/postunpack >/dev/null
#!/bin/sh
echo "deb http://auto.mirror.devuan.org/merged ascii main" > /etc/apt/sources.list
echo "deb http://auto.mirror.devuan.org/merged ascii-updates main" >> /etc/apt/sources.list
echo "deb http://auto.mirror.devuan.org/merged ascii-security main" >> /etc/apt/sources.list
apt-get update
apt-get --yes --force-yes upgrade
apt-get --yes --force-yes dist-upgrade
apt-get --yes --force-yes install ${extra_packages}
apt-get --yes --force-yes autoremove
apt-get clean
EOF
	chroot-script -d postunpack || zerr
}
##}}}

## {{{ blend_fixpax()
blend_fixpax() {
	fn blend_fixpax
	req=(strapdir)
	ckreq || return 1

	## XXX: not really a fix, rather a hack

	notice "fixing up pax markings"

	cat <<EOF | sudo tee ${strapdir}/fixpax >/dev/null
#!/bin/sh

bins="
	/usr/bin/icedove
	/home/luther/Browser/firefox
	/usr/bin/surf
	/usr/bin/python2.7
	/usr/bin/python3.5
	/usr/bin/python3.5m
"
for i in \${bins}; do
	test -f "\${i}" && {
		paxctl -c "\${i}"
		paxctl -m "\${i}"
	}
done  || return 0
EOF
	chroot-script fixpax
}
## }}}
## {{{ blend_install_gradm()
blend_install_gradm() {
	fn blend_install_gradm
	req=(gradm_version gradm_url strapdir)
	ckreq || return 1

	notice "grabbing gradm ${gradm_version}"

	sudo curl -L -o "$strapdir/root/gradm.tgz" "$gradm_url" || zerr

	notice "compiling..."

	cat <<EOF | sudo tee ${strapdir}/install-gradm >/dev/null
#!/bin/sh
cd /root
tar xvf gradm.tgz
cd gradm
make ${MAKEOPTS}
make install
cd ..
rm -rf gradm*
EOF
	chroot-script install-gradm || zerr
}
## }}}
## {{{ blend_install_tomb()
blend_install_tomb() {
	fn blend_install_tomb
	req=(strapdir tomb_version tomb_url)
	req+=(gtomb_version gtomb_url)
	ckreq || return 1

	notice "cloning tomb gits"
	sudo git clone "$tomb_url"  "$strapdir/root/tomb"  || zerr
	sudo git clone "$gtomb_url" "$strapdir/root/gtomb" || zerr

	notice "installing tomb in $strapdir"

	cat <<EOF | sudo tee ${strapdir}/install-tomb >/dev/null
#!/bin/sh
cd /root/tomb
git checkout ${tomb_version}
make install

cd extras/kdf-keys
make
make install

cd /root/gtomb
cp gtomb /usr/local/bin/gtomb
chmod 755 /usr/local/bin/gtomb
cd ..

rm -rf tomb
rm -rf gtomb
EOF
	chroot-script install-tomb
}
## }}}
## {{{ blend_install_torsocks()
blend_install_torsocks() {
	fn blend_install_torsocks
	req=(strapdir torsocks_version torsocks_url)
	ckreq || return 1

	notice "installing torsocks in $strapdir"

	notice "cloning torsocks"
	sudo git clone "$torsocks_url" "$strapdir/root/torsocks"

	notice "installing torsocks in $strapdir"
	cat <<EOF | sudo tee ${strapdir}/install-torsocks >/dev/null
#!/bin/sh
cd /root/torsocks
#git checkout ${torsocks_version}
./autogen.sh
./configure --prefix=/usr
make ${MAKEOPTS}
make install

cd ..
rm -rf torsocks
EOF
	chroot-script install-torsocks || zerr
}
## }}}
## {{{ blend_install_tbb()
blend_install_tbb() {
	fn blend_install_tbb
	req=(strapdir tbb_version tbb_url)
	ckreq || return 1

	notice "downloading Tor Browser Bundle..."
	sudo curl -L -o "$strapdir/home/luther/tbb.txz" "$tbb_url" || zerr

	notice "installing Tor Browser Bundle in $strapdir"
	pushd $strapdir/home/luther
		sudo tar xfv tbb.txz
		sudo chown -R 1000:1000 tor-browser_en-US
		sudo mv tor-browser_en-US/* .
		sudo rm -rfv tbb.txz tor-browser_en-US
	popd
}
## }}}
## {{{ blend_install_tinfoil()
blend_install_tinfoil() {
	fn blend_install_tinfoil
	req=(strapdir tinfoil_version tinfoil_url)
	ckreq || return 1

	notice "cloning tinfoil git"
	sudo git clone -b "$tinfoil_version" "$tinfoil_url" "$strapdir/root/tomb"  --recursive || zerr

	notice "installing tinfoil in $strapdir"
	cat <<EOF | sudo tee ${strapdir}/install-tinfoil >/dev/null
#!/bin/sh
cd /root/tinfoil
make install
cd ..
rm -rf tinfoil
EOF
	chroot-script install-tinfoil
}
## }}}
## {{{ blend_install_sup()
blend_install_sup() {
	fn blend_install_sup
	req=(strapdir)
	ckreq || return 1

	notice "installing sup..."
	cat <<EOF | sudo tee ${strapdir}/install-sup >/dev/null
#!/bin/sh
cd /usr/src/sup
make
make install
EOF
	chroot-script install-sup || zerr
}
## }}}
## {{{ blend_finalize()
blend_finalize() {
	fn blend_finalize
	req=(strapdir)
	ckreq || return 1

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh
## rootless xorg
groupadd wheel
chown -v :input /usr/bin/Xorg
chmod -v g+s /usr/bin/Xorg
for i in input video audio users netdev plugdev wheel; do
	gpasswd -a luther \${i}
done

## shells
chsh -s /bin/zsh luther
chsh -s /bin/zsh root

## perms
chown -R 1000:1000 /home/luther
chmod 0440 /etc/sudoers.d/heads

## misc
rm -rf /usr/local/share/zsh/site-functions
#adduser --system --quiet --group clearnet # for a clearnet browser
sed -i -e 's/devuan/heads/' /etc/hosts
gpg --recv-keys 0xB876CB44FA1B0274

update-rc.d lightdm defaults
update-rc.d wicd defaults
update-rc.d acpid defaults
update-rc.d tor remove

## cleanup
apt-get --yes --force-yes purge ${finalize_purge_packages}
apt-get --yes --force-yes autoremove
apt-get clean
updatedb

### kill foreign manpages
rm -rf /usr/share/man/??
rm -rf /usr/share/man/??_*
rm -rf /usr/share/locale
EOF
	chroot-script finalize || zerr
}
## }}}
